"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/orderedmap";
exports.ids = ["vendor-chunks/orderedmap"];
exports.modules = {

/***/ "(ssr)/./node_modules/orderedmap/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/orderedmap/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n    this.content = content;\n}\nOrderedMap.prototype = {\n    constructor: OrderedMap,\n    find: function(key) {\n        for(var i = 0; i < this.content.length; i += 2)if (this.content[i] === key) return i;\n        return -1;\n    },\n    // :: (string) → ?any\n    // Retrieve the value stored under `key`, or return undefined when\n    // no such key exists.\n    get: function(key) {\n        var found = this.find(key);\n        return found == -1 ? undefined : this.content[found + 1];\n    },\n    // :: (string, any, ?string) → OrderedMap\n    // Create a new map by replacing the value of `key` with a new\n    // value, or adding a binding to the end of the map. If `newKey` is\n    // given, the key of the binding will be replaced with that key.\n    update: function(key, value, newKey) {\n        var self = newKey && newKey != key ? this.remove(newKey) : this;\n        var found = self.find(key), content = self.content.slice();\n        if (found == -1) {\n            content.push(newKey || key, value);\n        } else {\n            content[found + 1] = value;\n            if (newKey) content[found] = newKey;\n        }\n        return new OrderedMap(content);\n    },\n    // :: (string) → OrderedMap\n    // Return a map with the given key removed, if it existed.\n    remove: function(key) {\n        var found = this.find(key);\n        if (found == -1) return this;\n        var content = this.content.slice();\n        content.splice(found, 2);\n        return new OrderedMap(content);\n    },\n    // :: (string, any) → OrderedMap\n    // Add a new key to the start of the map.\n    addToStart: function(key, value) {\n        return new OrderedMap([\n            key,\n            value\n        ].concat(this.remove(key).content));\n    },\n    // :: (string, any) → OrderedMap\n    // Add a new key to the end of the map.\n    addToEnd: function(key, value) {\n        var content = this.remove(key).content.slice();\n        content.push(key, value);\n        return new OrderedMap(content);\n    },\n    // :: (string, string, any) → OrderedMap\n    // Add a key after the given key. If `place` is not found, the new\n    // key is added to the end.\n    addBefore: function(place, key, value) {\n        var without = this.remove(key), content = without.content.slice();\n        var found = without.find(place);\n        content.splice(found == -1 ? content.length : found, 0, key, value);\n        return new OrderedMap(content);\n    },\n    // :: ((key: string, value: any))\n    // Call the given function for each key/value pair in the map, in\n    // order.\n    forEach: function(f) {\n        for(var i = 0; i < this.content.length; i += 2)f(this.content[i], this.content[i + 1]);\n    },\n    // :: (union<Object, OrderedMap>) → OrderedMap\n    // Create a new map by prepending the keys in this map that don't\n    // appear in `map` before the keys in `map`.\n    prepend: function(map) {\n        map = OrderedMap.from(map);\n        if (!map.size) return this;\n        return new OrderedMap(map.content.concat(this.subtract(map).content));\n    },\n    // :: (union<Object, OrderedMap>) → OrderedMap\n    // Create a new map by appending the keys in this map that don't\n    // appear in `map` after the keys in `map`.\n    append: function(map) {\n        map = OrderedMap.from(map);\n        if (!map.size) return this;\n        return new OrderedMap(this.subtract(map).content.concat(map.content));\n    },\n    // :: (union<Object, OrderedMap>) → OrderedMap\n    // Create a map containing all the keys in this map that don't\n    // appear in `map`.\n    subtract: function(map) {\n        var result = this;\n        map = OrderedMap.from(map);\n        for(var i = 0; i < map.content.length; i += 2)result = result.remove(map.content[i]);\n        return result;\n    },\n    // :: () → Object\n    // Turn ordered map into a plain object.\n    toObject: function() {\n        var result = {};\n        this.forEach(function(key, value) {\n            result[key] = value;\n        });\n        return result;\n    },\n    // :: number\n    // The amount of keys in this map.\n    get size () {\n        return this.content.length >> 1;\n    }\n};\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n    if (value instanceof OrderedMap) return value;\n    var content = [];\n    if (value) for(var prop in value)content.push(prop, value[prop]);\n    return new OrderedMap(content);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OrderedMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/orderedmap/dist/index.js\n");

/***/ })

};
;