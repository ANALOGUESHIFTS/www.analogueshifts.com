"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-model";
exports.ids = ["vendor-chunks/prosemirror-model"];
exports.modules = {

/***/ "(ssr)/./node_modules/prosemirror-model/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/prosemirror-model/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentMatch: () => (/* binding */ ContentMatch),\n/* harmony export */   DOMParser: () => (/* binding */ DOMParser),\n/* harmony export */   DOMSerializer: () => (/* binding */ DOMSerializer),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   Mark: () => (/* binding */ Mark),\n/* harmony export */   MarkType: () => (/* binding */ MarkType),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodeRange: () => (/* binding */ NodeRange),\n/* harmony export */   NodeType: () => (/* binding */ NodeType),\n/* harmony export */   ReplaceError: () => (/* binding */ ReplaceError),\n/* harmony export */   ResolvedPos: () => (/* binding */ ResolvedPos),\n/* harmony export */   Schema: () => (/* binding */ Schema),\n/* harmony export */   Slice: () => (/* binding */ Slice)\n/* harmony export */ });\n/* harmony import */ var orderedmap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! orderedmap */ \"(ssr)/./node_modules/orderedmap/dist/index.js\");\n\nfunction findDiffStart(a, b, pos) {\n    for(let i = 0;; i++){\n        if (i == a.childCount || i == b.childCount) return a.childCount == b.childCount ? null : pos;\n        let childA = a.child(i), childB = b.child(i);\n        if (childA == childB) {\n            pos += childA.nodeSize;\n            continue;\n        }\n        if (!childA.sameMarkup(childB)) return pos;\n        if (childA.isText && childA.text != childB.text) {\n            for(let j = 0; childA.text[j] == childB.text[j]; j++)pos++;\n            return pos;\n        }\n        if (childA.content.size || childB.content.size) {\n            let inner = findDiffStart(childA.content, childB.content, pos + 1);\n            if (inner != null) return inner;\n        }\n        pos += childA.nodeSize;\n    }\n}\nfunction findDiffEnd(a, b, posA, posB) {\n    for(let iA = a.childCount, iB = b.childCount;;){\n        if (iA == 0 || iB == 0) return iA == iB ? null : {\n            a: posA,\n            b: posB\n        };\n        let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;\n        if (childA == childB) {\n            posA -= size;\n            posB -= size;\n            continue;\n        }\n        if (!childA.sameMarkup(childB)) return {\n            a: posA,\n            b: posB\n        };\n        if (childA.isText && childA.text != childB.text) {\n            let same = 0, minSize = Math.min(childA.text.length, childB.text.length);\n            while(same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]){\n                same++;\n                posA--;\n                posB--;\n            }\n            return {\n                a: posA,\n                b: posB\n            };\n        }\n        if (childA.content.size || childB.content.size) {\n            let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);\n            if (inner) return inner;\n        }\n        posA -= size;\n        posB -= size;\n    }\n}\n/**\nA fragment represents a node's collection of child nodes.\n\nLike nodes, fragments are persistent data structures, and you\nshould not mutate them or their content. Rather, you create new\ninstances whenever needed. The API tries to make this easy.\n*/ class Fragment {\n    /**\n    @internal\n    */ constructor(/**\n    @internal\n    */ content, size){\n        this.content = content;\n        this.size = size || 0;\n        if (size == null) for(let i = 0; i < content.length; i++)this.size += content[i].nodeSize;\n    }\n    /**\n    Invoke a callback for all descendant nodes between the given two\n    positions (relative to start of this fragment). Doesn't descend\n    into a node when the callback returns `false`.\n    */ nodesBetween(from, to, f, nodeStart = 0, parent) {\n        for(let i = 0, pos = 0; pos < to; i++){\n            let child = this.content[i], end = pos + child.nodeSize;\n            if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {\n                let start = pos + 1;\n                child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);\n            }\n            pos = end;\n        }\n    }\n    /**\n    Call the given callback for every descendant node. `pos` will be\n    relative to the start of the fragment. The callback may return\n    `false` to prevent traversal of a given node's children.\n    */ descendants(f) {\n        this.nodesBetween(0, this.size, f);\n    }\n    /**\n    Extract the text between `from` and `to`. See the same method on\n    [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).\n    */ textBetween(from, to, blockSeparator, leafText) {\n        let text = \"\", first = true;\n        this.nodesBetween(from, to, (node, pos)=>{\n            let nodeText = node.isText ? node.text.slice(Math.max(from, pos) - pos, to - pos) : !node.isLeaf ? \"\" : leafText ? typeof leafText === \"function\" ? leafText(node) : leafText : node.type.spec.leafText ? node.type.spec.leafText(node) : \"\";\n            if (node.isBlock && (node.isLeaf && nodeText || node.isTextblock) && blockSeparator) {\n                if (first) first = false;\n                else text += blockSeparator;\n            }\n            text += nodeText;\n        }, 0);\n        return text;\n    }\n    /**\n    Create a new fragment containing the combined content of this\n    fragment and the other.\n    */ append(other) {\n        if (!other.size) return this;\n        if (!this.size) return other;\n        let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;\n        if (last.isText && last.sameMarkup(first)) {\n            content[content.length - 1] = last.withText(last.text + first.text);\n            i = 1;\n        }\n        for(; i < other.content.length; i++)content.push(other.content[i]);\n        return new Fragment(content, this.size + other.size);\n    }\n    /**\n    Cut out the sub-fragment between the two given positions.\n    */ cut(from, to = this.size) {\n        if (from == 0 && to == this.size) return this;\n        let result = [], size = 0;\n        if (to > from) for(let i = 0, pos = 0; pos < to; i++){\n            let child = this.content[i], end = pos + child.nodeSize;\n            if (end > from) {\n                if (pos < from || end > to) {\n                    if (child.isText) child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));\n                    else child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));\n                }\n                result.push(child);\n                size += child.nodeSize;\n            }\n            pos = end;\n        }\n        return new Fragment(result, size);\n    }\n    /**\n    @internal\n    */ cutByIndex(from, to) {\n        if (from == to) return Fragment.empty;\n        if (from == 0 && to == this.content.length) return this;\n        return new Fragment(this.content.slice(from, to));\n    }\n    /**\n    Create a new fragment in which the node at the given index is\n    replaced by the given node.\n    */ replaceChild(index, node) {\n        let current = this.content[index];\n        if (current == node) return this;\n        let copy = this.content.slice();\n        let size = this.size + node.nodeSize - current.nodeSize;\n        copy[index] = node;\n        return new Fragment(copy, size);\n    }\n    /**\n    Create a new fragment by prepending the given node to this\n    fragment.\n    */ addToStart(node) {\n        return new Fragment([\n            node\n        ].concat(this.content), this.size + node.nodeSize);\n    }\n    /**\n    Create a new fragment by appending the given node to this\n    fragment.\n    */ addToEnd(node) {\n        return new Fragment(this.content.concat(node), this.size + node.nodeSize);\n    }\n    /**\n    Compare this fragment to another one.\n    */ eq(other) {\n        if (this.content.length != other.content.length) return false;\n        for(let i = 0; i < this.content.length; i++)if (!this.content[i].eq(other.content[i])) return false;\n        return true;\n    }\n    /**\n    The first child of the fragment, or `null` if it is empty.\n    */ get firstChild() {\n        return this.content.length ? this.content[0] : null;\n    }\n    /**\n    The last child of the fragment, or `null` if it is empty.\n    */ get lastChild() {\n        return this.content.length ? this.content[this.content.length - 1] : null;\n    }\n    /**\n    The number of child nodes in this fragment.\n    */ get childCount() {\n        return this.content.length;\n    }\n    /**\n    Get the child node at the given index. Raise an error when the\n    index is out of range.\n    */ child(index) {\n        let found = this.content[index];\n        if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this);\n        return found;\n    }\n    /**\n    Get the child node at the given index, if it exists.\n    */ maybeChild(index) {\n        return this.content[index] || null;\n    }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */ forEach(f) {\n        for(let i = 0, p = 0; i < this.content.length; i++){\n            let child = this.content[i];\n            f(child, p, i);\n            p += child.nodeSize;\n        }\n    }\n    /**\n    Find the first position at which this fragment and another\n    fragment differ, or `null` if they are the same.\n    */ findDiffStart(other, pos = 0) {\n        return findDiffStart(this, other, pos);\n    }\n    /**\n    Find the first position, searching from the end, at which this\n    fragment and the given fragment differ, or `null` if they are\n    the same. Since this position will not be the same in both\n    nodes, an object with two separate positions is returned.\n    */ findDiffEnd(other, pos = this.size, otherPos = other.size) {\n        return findDiffEnd(this, other, pos, otherPos);\n    }\n    /**\n    Find the index and inner offset corresponding to a given relative\n    position in this fragment. The result object will be reused\n    (overwritten) the next time the function is called. (Not public.)\n    */ findIndex(pos, round = -1) {\n        if (pos == 0) return retIndex(0, pos);\n        if (pos == this.size) return retIndex(this.content.length, pos);\n        if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`);\n        for(let i = 0, curPos = 0;; i++){\n            let cur = this.child(i), end = curPos + cur.nodeSize;\n            if (end >= pos) {\n                if (end == pos || round > 0) return retIndex(i + 1, end);\n                return retIndex(i, curPos);\n            }\n            curPos = end;\n        }\n    }\n    /**\n    Return a debugging string that describes this fragment.\n    */ toString() {\n        return \"<\" + this.toStringInner() + \">\";\n    }\n    /**\n    @internal\n    */ toStringInner() {\n        return this.content.join(\", \");\n    }\n    /**\n    Create a JSON-serializeable representation of this fragment.\n    */ toJSON() {\n        return this.content.length ? this.content.map((n)=>n.toJSON()) : null;\n    }\n    /**\n    Deserialize a fragment from its JSON representation.\n    */ static fromJSON(schema, value) {\n        if (!value) return Fragment.empty;\n        if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\");\n        return new Fragment(value.map(schema.nodeFromJSON));\n    }\n    /**\n    Build a fragment from an array of nodes. Ensures that adjacent\n    text nodes with the same marks are joined together.\n    */ static fromArray(array) {\n        if (!array.length) return Fragment.empty;\n        let joined, size = 0;\n        for(let i = 0; i < array.length; i++){\n            let node = array[i];\n            size += node.nodeSize;\n            if (i && node.isText && array[i - 1].sameMarkup(node)) {\n                if (!joined) joined = array.slice(0, i);\n                joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);\n            } else if (joined) {\n                joined.push(node);\n            }\n        }\n        return new Fragment(joined || array, size);\n    }\n    /**\n    Create a fragment from something that can be interpreted as a\n    set of nodes. For `null`, it returns the empty fragment. For a\n    fragment, the fragment itself. For a node or array of nodes, a\n    fragment containing those nodes.\n    */ static from(nodes) {\n        if (!nodes) return Fragment.empty;\n        if (nodes instanceof Fragment) return nodes;\n        if (Array.isArray(nodes)) return this.fromArray(nodes);\n        if (nodes.attrs) return new Fragment([\n            nodes\n        ], nodes.nodeSize);\n        throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" + (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"));\n    }\n}\n/**\nAn empty fragment. Intended to be reused whenever a node doesn't\ncontain anything (rather than allocating a new empty fragment for\neach leaf node).\n*/ Fragment.empty = new Fragment([], 0);\nconst found = {\n    index: 0,\n    offset: 0\n};\nfunction retIndex(index, offset) {\n    found.index = index;\n    found.offset = offset;\n    return found;\n}\nfunction compareDeep(a, b) {\n    if (a === b) return true;\n    if (!(a && typeof a == \"object\") || !(b && typeof b == \"object\")) return false;\n    let array = Array.isArray(a);\n    if (Array.isArray(b) != array) return false;\n    if (array) {\n        if (a.length != b.length) return false;\n        for(let i = 0; i < a.length; i++)if (!compareDeep(a[i], b[i])) return false;\n    } else {\n        for(let p in a)if (!(p in b) || !compareDeep(a[p], b[p])) return false;\n        for(let p in b)if (!(p in a)) return false;\n    }\n    return true;\n}\n/**\nA mark is a piece of information that can be attached to a node,\nsuch as it being emphasized, in code font, or a link. It has a\ntype and optionally a set of attributes that provide further\ninformation (such as the target of the link). Marks are created\nthrough a `Schema`, which controls which types exist and which\nattributes they have.\n*/ class Mark {\n    /**\n    @internal\n    */ constructor(/**\n    The type of this mark.\n    */ type, /**\n    The attributes associated with this mark.\n    */ attrs){\n        this.type = type;\n        this.attrs = attrs;\n    }\n    /**\n    Given a set of marks, create a new set which contains this one as\n    well, in the right position. If this mark is already in the set,\n    the set itself is returned. If any marks that are set to be\n    [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,\n    those are replaced by this one.\n    */ addToSet(set) {\n        let copy, placed = false;\n        for(let i = 0; i < set.length; i++){\n            let other = set[i];\n            if (this.eq(other)) return set;\n            if (this.type.excludes(other.type)) {\n                if (!copy) copy = set.slice(0, i);\n            } else if (other.type.excludes(this.type)) {\n                return set;\n            } else {\n                if (!placed && other.type.rank > this.type.rank) {\n                    if (!copy) copy = set.slice(0, i);\n                    copy.push(this);\n                    placed = true;\n                }\n                if (copy) copy.push(other);\n            }\n        }\n        if (!copy) copy = set.slice();\n        if (!placed) copy.push(this);\n        return copy;\n    }\n    /**\n    Remove this mark from the given set, returning a new set. If this\n    mark is not in the set, the set itself is returned.\n    */ removeFromSet(set) {\n        for(let i = 0; i < set.length; i++)if (this.eq(set[i])) return set.slice(0, i).concat(set.slice(i + 1));\n        return set;\n    }\n    /**\n    Test whether this mark is in the given set of marks.\n    */ isInSet(set) {\n        for(let i = 0; i < set.length; i++)if (this.eq(set[i])) return true;\n        return false;\n    }\n    /**\n    Test whether this mark has the same type and attributes as\n    another mark.\n    */ eq(other) {\n        return this == other || this.type == other.type && compareDeep(this.attrs, other.attrs);\n    }\n    /**\n    Convert this mark to a JSON-serializeable representation.\n    */ toJSON() {\n        let obj = {\n            type: this.type.name\n        };\n        for(let _ in this.attrs){\n            obj.attrs = this.attrs;\n            break;\n        }\n        return obj;\n    }\n    /**\n    Deserialize a mark from JSON.\n    */ static fromJSON(schema, json) {\n        if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\");\n        let type = schema.marks[json.type];\n        if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`);\n        return type.create(json.attrs);\n    }\n    /**\n    Test whether two sets of marks are identical.\n    */ static sameSet(a, b) {\n        if (a == b) return true;\n        if (a.length != b.length) return false;\n        for(let i = 0; i < a.length; i++)if (!a[i].eq(b[i])) return false;\n        return true;\n    }\n    /**\n    Create a properly sorted mark set from null, a single mark, or an\n    unsorted array of marks.\n    */ static setFrom(marks) {\n        if (!marks || Array.isArray(marks) && marks.length == 0) return Mark.none;\n        if (marks instanceof Mark) return [\n            marks\n        ];\n        let copy = marks.slice();\n        copy.sort((a, b)=>a.type.rank - b.type.rank);\n        return copy;\n    }\n}\n/**\nThe empty set of marks.\n*/ Mark.none = [];\n/**\nError type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when\ngiven an invalid replacement.\n*/ class ReplaceError extends Error {\n}\n/*\nReplaceError = function(this: any, message: string) {\n  let err = Error.call(this, message)\n  ;(err as any).__proto__ = ReplaceError.prototype\n  return err\n} as any\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n*/ /**\nA slice represents a piece cut out of a larger document. It\nstores not only a fragment, but also the depth up to which nodes on\nboth side are ‘open’ (cut through).\n*/ class Slice {\n    /**\n    Create a slice. When specifying a non-zero open depth, you must\n    make sure that there are nodes of at least that depth at the\n    appropriate side of the fragment—i.e. if the fragment is an\n    empty paragraph node, `openStart` and `openEnd` can't be greater\n    than 1.\n    \n    It is not necessary for the content of open nodes to conform to\n    the schema's content constraints, though it should be a valid\n    start/end/middle for such a node, depending on which sides are\n    open.\n    */ constructor(/**\n    The slice's content.\n    */ content, /**\n    The open depth at the start of the fragment.\n    */ openStart, /**\n    The open depth at the end.\n    */ openEnd){\n        this.content = content;\n        this.openStart = openStart;\n        this.openEnd = openEnd;\n    }\n    /**\n    The size this slice would add when inserted into a document.\n    */ get size() {\n        return this.content.size - this.openStart - this.openEnd;\n    }\n    /**\n    @internal\n    */ insertAt(pos, fragment) {\n        let content = insertInto(this.content, pos + this.openStart, fragment);\n        return content && new Slice(content, this.openStart, this.openEnd);\n    }\n    /**\n    @internal\n    */ removeBetween(from, to) {\n        return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);\n    }\n    /**\n    Tests whether this slice is equal to another slice.\n    */ eq(other) {\n        return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;\n    }\n    /**\n    @internal\n    */ toString() {\n        return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\";\n    }\n    /**\n    Convert a slice to a JSON-serializable representation.\n    */ toJSON() {\n        if (!this.content.size) return null;\n        let json = {\n            content: this.content.toJSON()\n        };\n        if (this.openStart > 0) json.openStart = this.openStart;\n        if (this.openEnd > 0) json.openEnd = this.openEnd;\n        return json;\n    }\n    /**\n    Deserialize a slice from its JSON representation.\n    */ static fromJSON(schema, json) {\n        if (!json) return Slice.empty;\n        let openStart = json.openStart || 0, openEnd = json.openEnd || 0;\n        if (typeof openStart != \"number\" || typeof openEnd != \"number\") throw new RangeError(\"Invalid input for Slice.fromJSON\");\n        return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);\n    }\n    /**\n    Create a slice from a fragment by taking the maximum possible\n    open value on both side of the fragment.\n    */ static maxOpen(fragment, openIsolating = true) {\n        let openStart = 0, openEnd = 0;\n        for(let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)openStart++;\n        for(let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)openEnd++;\n        return new Slice(fragment, openStart, openEnd);\n    }\n}\n/**\nThe empty slice.\n*/ Slice.empty = new Slice(Fragment.empty, 0, 0);\nfunction removeRange(content, from, to) {\n    let { index, offset } = content.findIndex(from), child = content.maybeChild(index);\n    let { index: indexTo, offset: offsetTo } = content.findIndex(to);\n    if (offset == from || child.isText) {\n        if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\");\n        return content.cut(0, from).append(content.cut(to));\n    }\n    if (index != indexTo) throw new RangeError(\"Removing non-flat range\");\n    return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));\n}\nfunction insertInto(content, dist, insert, parent) {\n    let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);\n    if (offset == dist || child.isText) {\n        if (parent && !parent.canReplace(index, index, insert)) return null;\n        return content.cut(0, dist).append(insert).append(content.cut(dist));\n    }\n    let inner = insertInto(child.content, dist - offset - 1, insert);\n    return inner && content.replaceChild(index, child.copy(inner));\n}\nfunction replace($from, $to, slice) {\n    if (slice.openStart > $from.depth) throw new ReplaceError(\"Inserted content deeper than insertion position\");\n    if ($from.depth - slice.openStart != $to.depth - slice.openEnd) throw new ReplaceError(\"Inconsistent open depths\");\n    return replaceOuter($from, $to, slice, 0);\n}\nfunction replaceOuter($from, $to, slice, depth) {\n    let index = $from.index(depth), node = $from.node(depth);\n    if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n        let inner = replaceOuter($from, $to, slice, depth + 1);\n        return node.copy(node.content.replaceChild(index, inner));\n    } else if (!slice.content.size) {\n        return close(node, replaceTwoWay($from, $to, depth));\n    } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) {\n        let parent = $from.parent, content = parent.content;\n        return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));\n    } else {\n        let { start, end } = prepareSliceForReplace(slice, $from);\n        return close(node, replaceThreeWay($from, start, end, $to, depth));\n    }\n}\nfunction checkJoin(main, sub) {\n    if (!sub.type.compatibleContent(main.type)) throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name);\n}\nfunction joinable($before, $after, depth) {\n    let node = $before.node(depth);\n    checkJoin(node, $after.node(depth));\n    return node;\n}\nfunction addNode(child, target) {\n    let last = target.length - 1;\n    if (last >= 0 && child.isText && child.sameMarkup(target[last])) target[last] = child.withText(target[last].text + child.text);\n    else target.push(child);\n}\nfunction addRange($start, $end, depth, target) {\n    let node = ($end || $start).node(depth);\n    let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;\n    if ($start) {\n        startIndex = $start.index(depth);\n        if ($start.depth > depth) {\n            startIndex++;\n        } else if ($start.textOffset) {\n            addNode($start.nodeAfter, target);\n            startIndex++;\n        }\n    }\n    for(let i = startIndex; i < endIndex; i++)addNode(node.child(i), target);\n    if ($end && $end.depth == depth && $end.textOffset) addNode($end.nodeBefore, target);\n}\nfunction close(node, content) {\n    node.type.checkContent(content);\n    return node.copy(content);\n}\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n    let openStart = $from.depth > depth && joinable($from, $start, depth + 1);\n    let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);\n    let content = [];\n    addRange(null, $from, depth, content);\n    if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n        checkJoin(openStart, openEnd);\n        addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);\n    } else {\n        if (openStart) addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);\n        addRange($start, $end, depth, content);\n        if (openEnd) addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);\n    }\n    addRange($to, null, depth, content);\n    return new Fragment(content);\n}\nfunction replaceTwoWay($from, $to, depth) {\n    let content = [];\n    addRange(null, $from, depth, content);\n    if ($from.depth > depth) {\n        let type = joinable($from, $to, depth + 1);\n        addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);\n    }\n    addRange($to, null, depth, content);\n    return new Fragment(content);\n}\nfunction prepareSliceForReplace(slice, $along) {\n    let extra = $along.depth - slice.openStart, parent = $along.node(extra);\n    let node = parent.copy(slice.content);\n    for(let i = extra - 1; i >= 0; i--)node = $along.node(i).copy(Fragment.from(node));\n    return {\n        start: node.resolveNoCache(slice.openStart + extra),\n        end: node.resolveNoCache(node.content.size - slice.openEnd - extra)\n    };\n}\n/**\nYou can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more\ninformation about it. Objects of this class represent such a\nresolved position, providing various pieces of context\ninformation, and some helper methods.\n\nThroughout this interface, methods that take an optional `depth`\nparameter will interpret undefined as `this.depth` and negative\nnumbers as `this.depth + value`.\n*/ class ResolvedPos {\n    /**\n    @internal\n    */ constructor(/**\n    The position that was resolved.\n    */ pos, /**\n    @internal\n    */ path, /**\n    The offset this position has into its parent node.\n    */ parentOffset){\n        this.pos = pos;\n        this.path = path;\n        this.parentOffset = parentOffset;\n        this.depth = path.length / 3 - 1;\n    }\n    /**\n    @internal\n    */ resolveDepth(val) {\n        if (val == null) return this.depth;\n        if (val < 0) return this.depth + val;\n        return val;\n    }\n    /**\n    The parent node that the position points into. Note that even if\n    a position points into a text node, that node is not considered\n    the parent—text nodes are ‘flat’ in this model, and have no content.\n    */ get parent() {\n        return this.node(this.depth);\n    }\n    /**\n    The root node in which the position was resolved.\n    */ get doc() {\n        return this.node(0);\n    }\n    /**\n    The ancestor node at the given level. `p.node(p.depth)` is the\n    same as `p.parent`.\n    */ node(depth) {\n        return this.path[this.resolveDepth(depth) * 3];\n    }\n    /**\n    The index into the ancestor at the given level. If this points\n    at the 3rd node in the 2nd paragraph on the top level, for\n    example, `p.index(0)` is 1 and `p.index(1)` is 2.\n    */ index(depth) {\n        return this.path[this.resolveDepth(depth) * 3 + 1];\n    }\n    /**\n    The index pointing after this position into the ancestor at the\n    given level.\n    */ indexAfter(depth) {\n        depth = this.resolveDepth(depth);\n        return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);\n    }\n    /**\n    The (absolute) position at the start of the node at the given\n    level.\n    */ start(depth) {\n        depth = this.resolveDepth(depth);\n        return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n    }\n    /**\n    The (absolute) position at the end of the node at the given\n    level.\n    */ end(depth) {\n        depth = this.resolveDepth(depth);\n        return this.start(depth) + this.node(depth).content.size;\n    }\n    /**\n    The (absolute) position directly before the wrapping node at the\n    given level, or, when `depth` is `this.depth + 1`, the original\n    position.\n    */ before(depth) {\n        depth = this.resolveDepth(depth);\n        if (!depth) throw new RangeError(\"There is no position before the top-level node\");\n        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];\n    }\n    /**\n    The (absolute) position directly after the wrapping node at the\n    given level, or the original position when `depth` is `this.depth + 1`.\n    */ after(depth) {\n        depth = this.resolveDepth(depth);\n        if (!depth) throw new RangeError(\"There is no position after the top-level node\");\n        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;\n    }\n    /**\n    When this position points into a text node, this returns the\n    distance between the position and the start of the text node.\n    Will be zero for positions that point between nodes.\n    */ get textOffset() {\n        return this.pos - this.path[this.path.length - 1];\n    }\n    /**\n    Get the node directly after the position, if any. If the position\n    points into a text node, only the part of that node after the\n    position is returned.\n    */ get nodeAfter() {\n        let parent = this.parent, index = this.index(this.depth);\n        if (index == parent.childCount) return null;\n        let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);\n        return dOff ? parent.child(index).cut(dOff) : child;\n    }\n    /**\n    Get the node directly before the position, if any. If the\n    position points into a text node, only the part of that node\n    before the position is returned.\n    */ get nodeBefore() {\n        let index = this.index(this.depth);\n        let dOff = this.pos - this.path[this.path.length - 1];\n        if (dOff) return this.parent.child(index).cut(0, dOff);\n        return index == 0 ? null : this.parent.child(index - 1);\n    }\n    /**\n    Get the position at the given index in the parent node at the\n    given depth (which defaults to `this.depth`).\n    */ posAtIndex(index, depth) {\n        depth = this.resolveDepth(depth);\n        let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n        for(let i = 0; i < index; i++)pos += node.child(i).nodeSize;\n        return pos;\n    }\n    /**\n    Get the marks at this position, factoring in the surrounding\n    marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the\n    position is at the start of a non-empty node, the marks of the\n    node after it (if any) are returned.\n    */ marks() {\n        let parent = this.parent, index = this.index();\n        // In an empty parent, return the empty array\n        if (parent.content.size == 0) return Mark.none;\n        // When inside a text node, just return the text node's marks\n        if (this.textOffset) return parent.child(index).marks;\n        let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);\n        // If the `after` flag is true of there is no node before, make\n        // the node after this position the main reference.\n        if (!main) {\n            let tmp = main;\n            main = other;\n            other = tmp;\n        }\n        // Use all marks in the main node, except those that have\n        // `inclusive` set to false and are not present in the other node.\n        let marks = main.marks;\n        for(var i = 0; i < marks.length; i++)if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks))) marks = marks[i--].removeFromSet(marks);\n        return marks;\n    }\n    /**\n    Get the marks after the current position, if any, except those\n    that are non-inclusive and not present at position `$end`. This\n    is mostly useful for getting the set of marks to preserve after a\n    deletion. Will return `null` if this position is at the end of\n    its parent node or its parent node isn't a textblock (in which\n    case no marks should be preserved).\n    */ marksAcross($end) {\n        let after = this.parent.maybeChild(this.index());\n        if (!after || !after.isInline) return null;\n        let marks = after.marks, next = $end.parent.maybeChild($end.index());\n        for(var i = 0; i < marks.length; i++)if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks))) marks = marks[i--].removeFromSet(marks);\n        return marks;\n    }\n    /**\n    The depth up to which this position and the given (non-resolved)\n    position share the same parent nodes.\n    */ sharedDepth(pos) {\n        for(let depth = this.depth; depth > 0; depth--)if (this.start(depth) <= pos && this.end(depth) >= pos) return depth;\n        return 0;\n    }\n    /**\n    Returns a range based on the place where this position and the\n    given position diverge around block content. If both point into\n    the same textblock, for example, a range around that textblock\n    will be returned. If they point into different blocks, the range\n    around those blocks in their shared ancestor is returned. You can\n    pass in an optional predicate that will be called with a parent\n    node to see if a range into that parent is acceptable.\n    */ blockRange(other = this, pred) {\n        if (other.pos < this.pos) return other.blockRange(this);\n        for(let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)if (other.pos <= this.end(d) && (!pred || pred(this.node(d)))) return new NodeRange(this, other, d);\n        return null;\n    }\n    /**\n    Query whether the given position shares the same parent node.\n    */ sameParent(other) {\n        return this.pos - this.parentOffset == other.pos - other.parentOffset;\n    }\n    /**\n    Return the greater of this and the given position.\n    */ max(other) {\n        return other.pos > this.pos ? other : this;\n    }\n    /**\n    Return the smaller of this and the given position.\n    */ min(other) {\n        return other.pos < this.pos ? other : this;\n    }\n    /**\n    @internal\n    */ toString() {\n        let str = \"\";\n        for(let i = 1; i <= this.depth; i++)str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1);\n        return str + \":\" + this.parentOffset;\n    }\n    /**\n    @internal\n    */ static resolve(doc, pos) {\n        if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\");\n        let path = [];\n        let start = 0, parentOffset = pos;\n        for(let node = doc;;){\n            let { index, offset } = node.content.findIndex(parentOffset);\n            let rem = parentOffset - offset;\n            path.push(node, index, start + offset);\n            if (!rem) break;\n            node = node.child(index);\n            if (node.isText) break;\n            parentOffset = rem - 1;\n            start += offset + 1;\n        }\n        return new ResolvedPos(pos, path, parentOffset);\n    }\n    /**\n    @internal\n    */ static resolveCached(doc, pos) {\n        for(let i = 0; i < resolveCache.length; i++){\n            let cached = resolveCache[i];\n            if (cached.pos == pos && cached.doc == doc) return cached;\n        }\n        let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);\n        resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;\n        return result;\n    }\n}\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;\n/**\nRepresents a flat range of content, i.e. one that starts and\nends in the same node.\n*/ class NodeRange {\n    /**\n    Construct a node range. `$from` and `$to` should point into the\n    same node until at least the given `depth`, since a node range\n    denotes an adjacent set of nodes in a single parent node.\n    */ constructor(/**\n    A resolved position along the start of the content. May have a\n    `depth` greater than this object's `depth` property, since\n    these are the positions that were used to compute the range,\n    not re-resolved positions directly at its boundaries.\n    */ $from, /**\n    A position along the end of the content. See\n    caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).\n    */ $to, /**\n    The depth of the node that this range points into.\n    */ depth){\n        this.$from = $from;\n        this.$to = $to;\n        this.depth = depth;\n    }\n    /**\n    The position at the start of the range.\n    */ get start() {\n        return this.$from.before(this.depth + 1);\n    }\n    /**\n    The position at the end of the range.\n    */ get end() {\n        return this.$to.after(this.depth + 1);\n    }\n    /**\n    The parent node that the range points into.\n    */ get parent() {\n        return this.$from.node(this.depth);\n    }\n    /**\n    The start index of the range in the parent node.\n    */ get startIndex() {\n        return this.$from.index(this.depth);\n    }\n    /**\n    The end index of the range in the parent node.\n    */ get endIndex() {\n        return this.$to.indexAfter(this.depth);\n    }\n}\nconst emptyAttrs = Object.create(null);\n/**\nThis class represents a node in the tree that makes up a\nProseMirror document. So a document is an instance of `Node`, with\nchildren that are also instances of `Node`.\n\nNodes are persistent data structures. Instead of changing them, you\ncreate new ones with the content you want. Old ones keep pointing\nat the old document shape. This is made cheaper by sharing\nstructure between the old and new data as much as possible, which a\ntree shape like this (without back pointers) makes easy.\n\n**Do not** directly mutate the properties of a `Node` object. See\n[the guide](/docs/guide/#doc) for more information.\n*/ class Node {\n    /**\n    @internal\n    */ constructor(/**\n    The type of node that this is.\n    */ type, /**\n    An object mapping attribute names to values. The kind of\n    attributes allowed and required are\n    [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.\n    */ attrs, // A fragment holding the node's children.\n    content, /**\n    The marks (things like whether it is emphasized or part of a\n    link) applied to this node.\n    */ marks = Mark.none){\n        this.type = type;\n        this.attrs = attrs;\n        this.marks = marks;\n        this.content = content || Fragment.empty;\n    }\n    /**\n    The size of this node, as defined by the integer-based [indexing\n    scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n    amount of characters. For other leaf nodes, it is one. For\n    non-leaf nodes, it is the size of the content plus two (the\n    start and end token).\n    */ get nodeSize() {\n        return this.isLeaf ? 1 : 2 + this.content.size;\n    }\n    /**\n    The number of children that the node has.\n    */ get childCount() {\n        return this.content.childCount;\n    }\n    /**\n    Get the child node at the given index. Raises an error when the\n    index is out of range.\n    */ child(index) {\n        return this.content.child(index);\n    }\n    /**\n    Get the child node at the given index, if it exists.\n    */ maybeChild(index) {\n        return this.content.maybeChild(index);\n    }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */ forEach(f) {\n        this.content.forEach(f);\n    }\n    /**\n    Invoke a callback for all descendant nodes recursively between\n    the given two positions that are relative to start of this\n    node's content. The callback is invoked with the node, its\n    position relative to the original node (method receiver),\n    its parent node, and its child index. When the callback returns\n    false for a given node, that node's children will not be\n    recursed over. The last parameter can be used to specify a\n    starting position to count from.\n    */ nodesBetween(from, to, f, startPos = 0) {\n        this.content.nodesBetween(from, to, f, startPos, this);\n    }\n    /**\n    Call the given callback for every descendant node. Doesn't\n    descend into a node when the callback returns `false`.\n    */ descendants(f) {\n        this.nodesBetween(0, this.content.size, f);\n    }\n    /**\n    Concatenates all the text nodes found in this fragment and its\n    children.\n    */ get textContent() {\n        return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, \"\");\n    }\n    /**\n    Get all text between positions `from` and `to`. When\n    `blockSeparator` is given, it will be inserted to separate text\n    from different block nodes. If `leafText` is given, it'll be\n    inserted for every non-text leaf node encountered, otherwise\n    [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.\n    */ textBetween(from, to, blockSeparator, leafText) {\n        return this.content.textBetween(from, to, blockSeparator, leafText);\n    }\n    /**\n    Returns this node's first child, or `null` if there are no\n    children.\n    */ get firstChild() {\n        return this.content.firstChild;\n    }\n    /**\n    Returns this node's last child, or `null` if there are no\n    children.\n    */ get lastChild() {\n        return this.content.lastChild;\n    }\n    /**\n    Test whether two nodes represent the same piece of document.\n    */ eq(other) {\n        return this == other || this.sameMarkup(other) && this.content.eq(other.content);\n    }\n    /**\n    Compare the markup (type, attributes, and marks) of this node to\n    those of another. Returns `true` if both have the same markup.\n    */ sameMarkup(other) {\n        return this.hasMarkup(other.type, other.attrs, other.marks);\n    }\n    /**\n    Check whether this node's markup correspond to the given type,\n    attributes, and marks.\n    */ hasMarkup(type, attrs, marks) {\n        return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark.sameSet(this.marks, marks || Mark.none);\n    }\n    /**\n    Create a new node with the same markup as this node, containing\n    the given content (or empty, if no content is given).\n    */ copy(content = null) {\n        if (content == this.content) return this;\n        return new Node(this.type, this.attrs, content, this.marks);\n    }\n    /**\n    Create a copy of this node, with the given set of marks instead\n    of the node's own marks.\n    */ mark(marks) {\n        return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);\n    }\n    /**\n    Create a copy of this node with only the content between the\n    given positions. If `to` is not given, it defaults to the end of\n    the node.\n    */ cut(from, to = this.content.size) {\n        if (from == 0 && to == this.content.size) return this;\n        return this.copy(this.content.cut(from, to));\n    }\n    /**\n    Cut out the part of the document between the given positions, and\n    return it as a `Slice` object.\n    */ slice(from, to = this.content.size, includeParents = false) {\n        if (from == to) return Slice.empty;\n        let $from = this.resolve(from), $to = this.resolve(to);\n        let depth = includeParents ? 0 : $from.sharedDepth(to);\n        let start = $from.start(depth), node = $from.node(depth);\n        let content = node.content.cut($from.pos - start, $to.pos - start);\n        return new Slice(content, $from.depth - depth, $to.depth - depth);\n    }\n    /**\n    Replace the part of the document between the given positions with\n    the given slice. The slice must 'fit', meaning its open sides\n    must be able to connect to the surrounding content, and its\n    content nodes must be valid children for the node they are placed\n    into. If any of this is violated, an error of type\n    [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.\n    */ replace(from, to, slice) {\n        return replace(this.resolve(from), this.resolve(to), slice);\n    }\n    /**\n    Find the node directly after the given position.\n    */ nodeAt(pos) {\n        for(let node = this;;){\n            let { index, offset } = node.content.findIndex(pos);\n            node = node.maybeChild(index);\n            if (!node) return null;\n            if (offset == pos || node.isText) return node;\n            pos -= offset + 1;\n        }\n    }\n    /**\n    Find the (direct) child node after the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */ childAfter(pos) {\n        let { index, offset } = this.content.findIndex(pos);\n        return {\n            node: this.content.maybeChild(index),\n            index,\n            offset\n        };\n    }\n    /**\n    Find the (direct) child node before the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */ childBefore(pos) {\n        if (pos == 0) return {\n            node: null,\n            index: 0,\n            offset: 0\n        };\n        let { index, offset } = this.content.findIndex(pos);\n        if (offset < pos) return {\n            node: this.content.child(index),\n            index,\n            offset\n        };\n        let node = this.content.child(index - 1);\n        return {\n            node,\n            index: index - 1,\n            offset: offset - node.nodeSize\n        };\n    }\n    /**\n    Resolve the given position in the document, returning an\n    [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.\n    */ resolve(pos) {\n        return ResolvedPos.resolveCached(this, pos);\n    }\n    /**\n    @internal\n    */ resolveNoCache(pos) {\n        return ResolvedPos.resolve(this, pos);\n    }\n    /**\n    Test whether a given mark or mark type occurs in this document\n    between the two given positions.\n    */ rangeHasMark(from, to, type) {\n        let found = false;\n        if (to > from) this.nodesBetween(from, to, (node)=>{\n            if (type.isInSet(node.marks)) found = true;\n            return !found;\n        });\n        return found;\n    }\n    /**\n    True when this is a block (non-inline node)\n    */ get isBlock() {\n        return this.type.isBlock;\n    }\n    /**\n    True when this is a textblock node, a block node with inline\n    content.\n    */ get isTextblock() {\n        return this.type.isTextblock;\n    }\n    /**\n    True when this node allows inline content.\n    */ get inlineContent() {\n        return this.type.inlineContent;\n    }\n    /**\n    True when this is an inline node (a text node or a node that can\n    appear among text).\n    */ get isInline() {\n        return this.type.isInline;\n    }\n    /**\n    True when this is a text node.\n    */ get isText() {\n        return this.type.isText;\n    }\n    /**\n    True when this is a leaf node.\n    */ get isLeaf() {\n        return this.type.isLeaf;\n    }\n    /**\n    True when this is an atom, i.e. when it does not have directly\n    editable content. This is usually the same as `isLeaf`, but can\n    be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)\n    on a node's spec (typically used when the node is displayed as\n    an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).\n    */ get isAtom() {\n        return this.type.isAtom;\n    }\n    /**\n    Return a string representation of this node for debugging\n    purposes.\n    */ toString() {\n        if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this);\n        let name = this.type.name;\n        if (this.content.size) name += \"(\" + this.content.toStringInner() + \")\";\n        return wrapMarks(this.marks, name);\n    }\n    /**\n    Get the content match in this node at the given index.\n    */ contentMatchAt(index) {\n        let match = this.type.contentMatch.matchFragment(this.content, 0, index);\n        if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\");\n        return match;\n    }\n    /**\n    Test whether replacing the range between `from` and `to` (by\n    child index) with the given replacement fragment (which defaults\n    to the empty fragment) would leave the node's content valid. You\n    can optionally pass `start` and `end` indices into the\n    replacement fragment.\n    */ canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n        let one = this.contentMatchAt(from).matchFragment(replacement, start, end);\n        let two = one && one.matchFragment(this.content, to);\n        if (!two || !two.validEnd) return false;\n        for(let i = start; i < end; i++)if (!this.type.allowsMarks(replacement.child(i).marks)) return false;\n        return true;\n    }\n    /**\n    Test whether replacing the range `from` to `to` (by index) with\n    a node of the given type would leave the node's content valid.\n    */ canReplaceWith(from, to, type, marks) {\n        if (marks && !this.type.allowsMarks(marks)) return false;\n        let start = this.contentMatchAt(from).matchType(type);\n        let end = start && start.matchFragment(this.content, to);\n        return end ? end.validEnd : false;\n    }\n    /**\n    Test whether the given node's content could be appended to this\n    node. If that node is empty, this will only return true if there\n    is at least one node type that can appear in both nodes (to avoid\n    merging completely incompatible nodes).\n    */ canAppend(other) {\n        if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content);\n        else return this.type.compatibleContent(other.type);\n    }\n    /**\n    Check whether this node and its descendants conform to the\n    schema, and raise error when they do not.\n    */ check() {\n        this.type.checkContent(this.content);\n        let copy = Mark.none;\n        for(let i = 0; i < this.marks.length; i++)copy = this.marks[i].addToSet(copy);\n        if (!Mark.sameSet(copy, this.marks)) throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((m)=>m.type.name)}`);\n        this.content.forEach((node)=>node.check());\n    }\n    /**\n    Return a JSON-serializeable representation of this node.\n    */ toJSON() {\n        let obj = {\n            type: this.type.name\n        };\n        for(let _ in this.attrs){\n            obj.attrs = this.attrs;\n            break;\n        }\n        if (this.content.size) obj.content = this.content.toJSON();\n        if (this.marks.length) obj.marks = this.marks.map((n)=>n.toJSON());\n        return obj;\n    }\n    /**\n    Deserialize a node from its JSON representation.\n    */ static fromJSON(schema, json) {\n        if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\");\n        let marks = null;\n        if (json.marks) {\n            if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\");\n            marks = json.marks.map(schema.markFromJSON);\n        }\n        if (json.type == \"text\") {\n            if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\");\n            return schema.text(json.text, marks);\n        }\n        let content = Fragment.fromJSON(schema, json.content);\n        return schema.nodeType(json.type).create(json.attrs, content, marks);\n    }\n}\nNode.prototype.text = undefined;\nclass TextNode extends Node {\n    /**\n    @internal\n    */ constructor(type, attrs, content, marks){\n        super(type, attrs, null, marks);\n        if (!content) throw new RangeError(\"Empty text nodes are not allowed\");\n        this.text = content;\n    }\n    toString() {\n        if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this);\n        return wrapMarks(this.marks, JSON.stringify(this.text));\n    }\n    get textContent() {\n        return this.text;\n    }\n    textBetween(from, to) {\n        return this.text.slice(from, to);\n    }\n    get nodeSize() {\n        return this.text.length;\n    }\n    mark(marks) {\n        return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);\n    }\n    withText(text) {\n        if (text == this.text) return this;\n        return new TextNode(this.type, this.attrs, text, this.marks);\n    }\n    cut(from = 0, to = this.text.length) {\n        if (from == 0 && to == this.text.length) return this;\n        return this.withText(this.text.slice(from, to));\n    }\n    eq(other) {\n        return this.sameMarkup(other) && this.text == other.text;\n    }\n    toJSON() {\n        let base = super.toJSON();\n        base.text = this.text;\n        return base;\n    }\n}\nfunction wrapMarks(marks, str) {\n    for(let i = marks.length - 1; i >= 0; i--)str = marks[i].type.name + \"(\" + str + \")\";\n    return str;\n}\n/**\nInstances of this class represent a match state of a node type's\n[content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to\nfind out whether further content matches here, and whether a given\nposition is a valid end of the node.\n*/ class ContentMatch {\n    /**\n    @internal\n    */ constructor(/**\n    True when this match state represents a valid end of the node.\n    */ validEnd){\n        this.validEnd = validEnd;\n        /**\n        @internal\n        */ this.next = [];\n        /**\n        @internal\n        */ this.wrapCache = [];\n    }\n    /**\n    @internal\n    */ static parse(string, nodeTypes) {\n        let stream = new TokenStream(string, nodeTypes);\n        if (stream.next == null) return ContentMatch.empty;\n        let expr = parseExpr(stream);\n        if (stream.next) stream.err(\"Unexpected trailing text\");\n        let match = dfa(nfa(expr));\n        checkForDeadEnds(match, stream);\n        return match;\n    }\n    /**\n    Match a node type, returning a match after that node if\n    successful.\n    */ matchType(type) {\n        for(let i = 0; i < this.next.length; i++)if (this.next[i].type == type) return this.next[i].next;\n        return null;\n    }\n    /**\n    Try to match a fragment. Returns the resulting match when\n    successful.\n    */ matchFragment(frag, start = 0, end = frag.childCount) {\n        let cur = this;\n        for(let i = start; cur && i < end; i++)cur = cur.matchType(frag.child(i).type);\n        return cur;\n    }\n    /**\n    @internal\n    */ get inlineContent() {\n        return this.next.length != 0 && this.next[0].type.isInline;\n    }\n    /**\n    Get the first matching node type at this match position that can\n    be generated.\n    */ get defaultType() {\n        for(let i = 0; i < this.next.length; i++){\n            let { type } = this.next[i];\n            if (!(type.isText || type.hasRequiredAttrs())) return type;\n        }\n        return null;\n    }\n    /**\n    @internal\n    */ compatible(other) {\n        for(let i = 0; i < this.next.length; i++)for(let j = 0; j < other.next.length; j++)if (this.next[i].type == other.next[j].type) return true;\n        return false;\n    }\n    /**\n    Try to match the given fragment, and if that fails, see if it can\n    be made to match by inserting nodes in front of it. When\n    successful, return a fragment of inserted nodes (which may be\n    empty if nothing had to be inserted). When `toEnd` is true, only\n    return a fragment if the resulting match goes to the end of the\n    content expression.\n    */ fillBefore(after, toEnd = false, startIndex = 0) {\n        let seen = [\n            this\n        ];\n        function search(match, types) {\n            let finished = match.matchFragment(after, startIndex);\n            if (finished && (!toEnd || finished.validEnd)) return Fragment.from(types.map((tp)=>tp.createAndFill()));\n            for(let i = 0; i < match.next.length; i++){\n                let { type, next } = match.next[i];\n                if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n                    seen.push(next);\n                    let found = search(next, types.concat(type));\n                    if (found) return found;\n                }\n            }\n            return null;\n        }\n        return search(this, []);\n    }\n    /**\n    Find a set of wrapping node types that would allow a node of the\n    given type to appear at this position. The result may be empty\n    (when it fits directly) and will be null when no such wrapping\n    exists.\n    */ findWrapping(target) {\n        for(let i = 0; i < this.wrapCache.length; i += 2)if (this.wrapCache[i] == target) return this.wrapCache[i + 1];\n        let computed = this.computeWrapping(target);\n        this.wrapCache.push(target, computed);\n        return computed;\n    }\n    /**\n    @internal\n    */ computeWrapping(target) {\n        let seen = Object.create(null), active = [\n            {\n                match: this,\n                type: null,\n                via: null\n            }\n        ];\n        while(active.length){\n            let current = active.shift(), match = current.match;\n            if (match.matchType(target)) {\n                let result = [];\n                for(let obj = current; obj.type; obj = obj.via)result.push(obj.type);\n                return result.reverse();\n            }\n            for(let i = 0; i < match.next.length; i++){\n                let { type, next } = match.next[i];\n                if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {\n                    active.push({\n                        match: type.contentMatch,\n                        type,\n                        via: current\n                    });\n                    seen[type.name] = true;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n    The number of outgoing edges this node has in the finite\n    automaton that describes the content expression.\n    */ get edgeCount() {\n        return this.next.length;\n    }\n    /**\n    Get the _n_​th outgoing edge from this node in the finite\n    automaton that describes the content expression.\n    */ edge(n) {\n        if (n >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`);\n        return this.next[n];\n    }\n    /**\n    @internal\n    */ toString() {\n        let seen = [];\n        function scan(m) {\n            seen.push(m);\n            for(let i = 0; i < m.next.length; i++)if (seen.indexOf(m.next[i].next) == -1) scan(m.next[i].next);\n        }\n        scan(this);\n        return seen.map((m, i)=>{\n            let out = i + (m.validEnd ? \"*\" : \" \") + \" \";\n            for(let i = 0; i < m.next.length; i++)out += (i ? \", \" : \"\") + m.next[i].type.name + \"->\" + seen.indexOf(m.next[i].next);\n            return out;\n        }).join(\"\\n\");\n    }\n}\n/**\n@internal\n*/ ContentMatch.empty = new ContentMatch(true);\nclass TokenStream {\n    constructor(string, nodeTypes){\n        this.string = string;\n        this.nodeTypes = nodeTypes;\n        this.inline = null;\n        this.pos = 0;\n        this.tokens = string.split(/\\s*(?=\\b|\\W|$)/);\n        if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop();\n        if (this.tokens[0] == \"\") this.tokens.shift();\n    }\n    get next() {\n        return this.tokens[this.pos];\n    }\n    eat(tok) {\n        return this.next == tok && (this.pos++ || true);\n    }\n    err(str) {\n        throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\");\n    }\n}\nfunction parseExpr(stream) {\n    let exprs = [];\n    do {\n        exprs.push(parseExprSeq(stream));\n    }while (stream.eat(\"|\"));\n    return exprs.length == 1 ? exprs[0] : {\n        type: \"choice\",\n        exprs\n    };\n}\nfunction parseExprSeq(stream) {\n    let exprs = [];\n    do {\n        exprs.push(parseExprSubscript(stream));\n    }while (stream.next && stream.next != \")\" && stream.next != \"|\");\n    return exprs.length == 1 ? exprs[0] : {\n        type: \"seq\",\n        exprs\n    };\n}\nfunction parseExprSubscript(stream) {\n    let expr = parseExprAtom(stream);\n    for(;;){\n        if (stream.eat(\"+\")) expr = {\n            type: \"plus\",\n            expr\n        };\n        else if (stream.eat(\"*\")) expr = {\n            type: \"star\",\n            expr\n        };\n        else if (stream.eat(\"?\")) expr = {\n            type: \"opt\",\n            expr\n        };\n        else if (stream.eat(\"{\")) expr = parseExprRange(stream, expr);\n        else break;\n    }\n    return expr;\n}\nfunction parseNum(stream) {\n    if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\");\n    let result = Number(stream.next);\n    stream.pos++;\n    return result;\n}\nfunction parseExprRange(stream, expr) {\n    let min = parseNum(stream), max = min;\n    if (stream.eat(\",\")) {\n        if (stream.next != \"}\") max = parseNum(stream);\n        else max = -1;\n    }\n    if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\");\n    return {\n        type: \"range\",\n        min,\n        max,\n        expr\n    };\n}\nfunction resolveName(stream, name) {\n    let types = stream.nodeTypes, type = types[name];\n    if (type) return [\n        type\n    ];\n    let result = [];\n    for(let typeName in types){\n        let type = types[typeName];\n        if (type.groups.indexOf(name) > -1) result.push(type);\n    }\n    if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\");\n    return result;\n}\nfunction parseExprAtom(stream) {\n    if (stream.eat(\"(\")) {\n        let expr = parseExpr(stream);\n        if (!stream.eat(\")\")) stream.err(\"Missing closing paren\");\n        return expr;\n    } else if (!/\\W/.test(stream.next)) {\n        let exprs = resolveName(stream, stream.next).map((type)=>{\n            if (stream.inline == null) stream.inline = type.isInline;\n            else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\");\n            return {\n                type: \"name\",\n                value: type\n            };\n        });\n        stream.pos++;\n        return exprs.length == 1 ? exprs[0] : {\n            type: \"choice\",\n            exprs\n        };\n    } else {\n        stream.err(\"Unexpected token '\" + stream.next + \"'\");\n    }\n}\n/**\nConstruct an NFA from an expression as returned by the parser. The\nNFA is represented as an array of states, which are themselves\narrays of edges, which are `{term, to}` objects. The first state is\nthe entry state and the last node is the success state.\n\nNote that unlike typical NFAs, the edge ordering in this one is\nsignificant, in that it is used to contruct filler content when\nnecessary.\n*/ function nfa(expr) {\n    let nfa = [\n        []\n    ];\n    connect(compile(expr, 0), node());\n    return nfa;\n    function node() {\n        return nfa.push([]) - 1;\n    }\n    function edge(from, to, term) {\n        let edge = {\n            term,\n            to\n        };\n        nfa[from].push(edge);\n        return edge;\n    }\n    function connect(edges, to) {\n        edges.forEach((edge)=>edge.to = to);\n    }\n    function compile(expr, from) {\n        if (expr.type == \"choice\") {\n            return expr.exprs.reduce((out, expr)=>out.concat(compile(expr, from)), []);\n        } else if (expr.type == \"seq\") {\n            for(let i = 0;; i++){\n                let next = compile(expr.exprs[i], from);\n                if (i == expr.exprs.length - 1) return next;\n                connect(next, from = node());\n            }\n        } else if (expr.type == \"star\") {\n            let loop = node();\n            edge(from, loop);\n            connect(compile(expr.expr, loop), loop);\n            return [\n                edge(loop)\n            ];\n        } else if (expr.type == \"plus\") {\n            let loop = node();\n            connect(compile(expr.expr, from), loop);\n            connect(compile(expr.expr, loop), loop);\n            return [\n                edge(loop)\n            ];\n        } else if (expr.type == \"opt\") {\n            return [\n                edge(from)\n            ].concat(compile(expr.expr, from));\n        } else if (expr.type == \"range\") {\n            let cur = from;\n            for(let i = 0; i < expr.min; i++){\n                let next = node();\n                connect(compile(expr.expr, cur), next);\n                cur = next;\n            }\n            if (expr.max == -1) {\n                connect(compile(expr.expr, cur), cur);\n            } else {\n                for(let i = expr.min; i < expr.max; i++){\n                    let next = node();\n                    edge(cur, next);\n                    connect(compile(expr.expr, cur), next);\n                    cur = next;\n                }\n            }\n            return [\n                edge(cur)\n            ];\n        } else if (expr.type == \"name\") {\n            return [\n                edge(from, undefined, expr.value)\n            ];\n        } else {\n            throw new Error(\"Unknown expr type\");\n        }\n    }\n}\nfunction cmp(a, b) {\n    return b - a;\n}\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n    let result = [];\n    scan(node);\n    return result.sort(cmp);\n    function scan(node) {\n        let edges = nfa[node];\n        if (edges.length == 1 && !edges[0].term) return scan(edges[0].to);\n        result.push(node);\n        for(let i = 0; i < edges.length; i++){\n            let { term, to } = edges[i];\n            if (!term && result.indexOf(to) == -1) scan(to);\n        }\n    }\n}\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n    let labeled = Object.create(null);\n    return explore(nullFrom(nfa, 0));\n    function explore(states) {\n        let out = [];\n        states.forEach((node)=>{\n            nfa[node].forEach(({ term, to })=>{\n                if (!term) return;\n                let set;\n                for(let i = 0; i < out.length; i++)if (out[i][0] == term) set = out[i][1];\n                nullFrom(nfa, to).forEach((node)=>{\n                    if (!set) out.push([\n                        term,\n                        set = []\n                    ]);\n                    if (set.indexOf(node) == -1) set.push(node);\n                });\n            });\n        });\n        let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);\n        for(let i = 0; i < out.length; i++){\n            let states = out[i][1].sort(cmp);\n            state.next.push({\n                type: out[i][0],\n                next: labeled[states.join(\",\")] || explore(states)\n            });\n        }\n        return state;\n    }\n}\nfunction checkForDeadEnds(match, stream) {\n    for(let i = 0, work = [\n        match\n    ]; i < work.length; i++){\n        let state = work[i], dead = !state.validEnd, nodes = [];\n        for(let j = 0; j < state.next.length; j++){\n            let { type, next } = state.next[j];\n            nodes.push(type.name);\n            if (dead && !(type.isText || type.hasRequiredAttrs())) dead = false;\n            if (work.indexOf(next) == -1) work.push(next);\n        }\n        if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\");\n    }\n}\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n    let defaults = Object.create(null);\n    for(let attrName in attrs){\n        let attr = attrs[attrName];\n        if (!attr.hasDefault) return null;\n        defaults[attrName] = attr.default;\n    }\n    return defaults;\n}\nfunction computeAttrs(attrs, value) {\n    let built = Object.create(null);\n    for(let name in attrs){\n        let given = value && value[name];\n        if (given === undefined) {\n            let attr = attrs[name];\n            if (attr.hasDefault) given = attr.default;\n            else throw new RangeError(\"No value supplied for attribute \" + name);\n        }\n        built[name] = given;\n    }\n    return built;\n}\nfunction initAttrs(attrs) {\n    let result = Object.create(null);\n    if (attrs) for(let name in attrs)result[name] = new Attribute(attrs[name]);\n    return result;\n}\n/**\nNode types are objects allocated once per `Schema` and used to\n[tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information\nabout the node type, such as its name and what kind of node it\nrepresents.\n*/ class NodeType {\n    /**\n    @internal\n    */ constructor(/**\n    The name the node type has in this schema.\n    */ name, /**\n    A link back to the `Schema` the node type belongs to.\n    */ schema, /**\n    The spec that this type is based on\n    */ spec){\n        this.name = name;\n        this.schema = schema;\n        this.spec = spec;\n        /**\n        The set of marks allowed in this node. `null` means all marks\n        are allowed.\n        */ this.markSet = null;\n        this.groups = spec.group ? spec.group.split(\" \") : [];\n        this.attrs = initAttrs(spec.attrs);\n        this.defaultAttrs = defaultAttrs(this.attrs);\n        this.contentMatch = null;\n        this.inlineContent = null;\n        this.isBlock = !(spec.inline || name == \"text\");\n        this.isText = name == \"text\";\n    }\n    /**\n    True if this is an inline type.\n    */ get isInline() {\n        return !this.isBlock;\n    }\n    /**\n    True if this is a textblock type, a block that contains inline\n    content.\n    */ get isTextblock() {\n        return this.isBlock && this.inlineContent;\n    }\n    /**\n    True for node types that allow no content.\n    */ get isLeaf() {\n        return this.contentMatch == ContentMatch.empty;\n    }\n    /**\n    True when this node is an atom, i.e. when it does not have\n    directly editable content.\n    */ get isAtom() {\n        return this.isLeaf || !!this.spec.atom;\n    }\n    /**\n    The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.\n    */ get whitespace() {\n        return this.spec.whitespace || (this.spec.code ? \"pre\" : \"normal\");\n    }\n    /**\n    Tells you whether this node type has any required attributes.\n    */ hasRequiredAttrs() {\n        for(let n in this.attrs)if (this.attrs[n].isRequired) return true;\n        return false;\n    }\n    /**\n    Indicates whether this node allows some of the same content as\n    the given node type.\n    */ compatibleContent(other) {\n        return this == other || this.contentMatch.compatible(other.contentMatch);\n    }\n    /**\n    @internal\n    */ computeAttrs(attrs) {\n        if (!attrs && this.defaultAttrs) return this.defaultAttrs;\n        else return computeAttrs(this.attrs, attrs);\n    }\n    /**\n    Create a `Node` of this type. The given attributes are\n    checked and defaulted (you can pass `null` to use the type's\n    defaults entirely, if no required attributes exist). `content`\n    may be a `Fragment`, a node, an array of nodes, or\n    `null`. Similarly `marks` may be `null` to default to the empty\n    set of marks.\n    */ create(attrs = null, content, marks) {\n        if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\");\n        return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content\n    against the node type's content restrictions, and throw an error\n    if it doesn't match.\n    */ createChecked(attrs = null, content, marks) {\n        content = Fragment.from(content);\n        this.checkContent(content);\n        return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is\n    necessary to add nodes to the start or end of the given fragment\n    to make it fit the node. If no fitting wrapping can be found,\n    return null. Note that, due to the fact that required nodes can\n    always be created, this will always succeed if you pass null or\n    `Fragment.empty` as content.\n    */ createAndFill(attrs = null, content, marks) {\n        attrs = this.computeAttrs(attrs);\n        content = Fragment.from(content);\n        if (content.size) {\n            let before = this.contentMatch.fillBefore(content);\n            if (!before) return null;\n            content = before.append(content);\n        }\n        let matched = this.contentMatch.matchFragment(content);\n        let after = matched && matched.fillBefore(Fragment.empty, true);\n        if (!after) return null;\n        return new Node(this, attrs, content.append(after), Mark.setFrom(marks));\n    }\n    /**\n    Returns true if the given fragment is valid content for this node\n    type with the given attributes.\n    */ validContent(content) {\n        let result = this.contentMatch.matchFragment(content);\n        if (!result || !result.validEnd) return false;\n        for(let i = 0; i < content.childCount; i++)if (!this.allowsMarks(content.child(i).marks)) return false;\n        return true;\n    }\n    /**\n    Throws a RangeError if the given fragment is not valid content for this\n    node type.\n    @internal\n    */ checkContent(content) {\n        if (!this.validContent(content)) throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);\n    }\n    /**\n    Check whether the given mark type is allowed in this node.\n    */ allowsMarkType(markType) {\n        return this.markSet == null || this.markSet.indexOf(markType) > -1;\n    }\n    /**\n    Test whether the given set of marks are allowed in this node.\n    */ allowsMarks(marks) {\n        if (this.markSet == null) return true;\n        for(let i = 0; i < marks.length; i++)if (!this.allowsMarkType(marks[i].type)) return false;\n        return true;\n    }\n    /**\n    Removes the marks that are not allowed in this node from the given set.\n    */ allowedMarks(marks) {\n        if (this.markSet == null) return marks;\n        let copy;\n        for(let i = 0; i < marks.length; i++){\n            if (!this.allowsMarkType(marks[i].type)) {\n                if (!copy) copy = marks.slice(0, i);\n            } else if (copy) {\n                copy.push(marks[i]);\n            }\n        }\n        return !copy ? marks : copy.length ? copy : Mark.none;\n    }\n    /**\n    @internal\n    */ static compile(nodes, schema) {\n        let result = Object.create(null);\n        nodes.forEach((name, spec)=>result[name] = new NodeType(name, schema, spec));\n        let topType = schema.spec.topNode || \"doc\";\n        if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\");\n        if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\");\n        for(let _ in result.text.attrs)throw new RangeError(\"The text node type should not have attributes\");\n        return result;\n    }\n}\n// Attribute descriptors\nclass Attribute {\n    constructor(options){\n        this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\");\n        this.default = options.default;\n    }\n    get isRequired() {\n        return !this.hasDefault;\n    }\n}\n// Marks\n/**\nLike nodes, marks (which are associated with nodes to signify\nthings like emphasis or being part of a link) are\n[tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are\ninstantiated once per `Schema`.\n*/ class MarkType {\n    /**\n    @internal\n    */ constructor(/**\n    The name of the mark type.\n    */ name, /**\n    @internal\n    */ rank, /**\n    The schema that this mark type instance is part of.\n    */ schema, /**\n    The spec on which the type is based.\n    */ spec){\n        this.name = name;\n        this.rank = rank;\n        this.schema = schema;\n        this.spec = spec;\n        this.attrs = initAttrs(spec.attrs);\n        this.excluded = null;\n        let defaults = defaultAttrs(this.attrs);\n        this.instance = defaults ? new Mark(this, defaults) : null;\n    }\n    /**\n    Create a mark of this type. `attrs` may be `null` or an object\n    containing only some of the mark's attributes. The others, if\n    they have defaults, will be added.\n    */ create(attrs = null) {\n        if (!attrs && this.instance) return this.instance;\n        return new Mark(this, computeAttrs(this.attrs, attrs));\n    }\n    /**\n    @internal\n    */ static compile(marks, schema) {\n        let result = Object.create(null), rank = 0;\n        marks.forEach((name, spec)=>result[name] = new MarkType(name, rank++, schema, spec));\n        return result;\n    }\n    /**\n    When there is a mark of this type in the given set, a new set\n    without it is returned. Otherwise, the input set is returned.\n    */ removeFromSet(set) {\n        for(var i = 0; i < set.length; i++)if (set[i].type == this) {\n            set = set.slice(0, i).concat(set.slice(i + 1));\n            i--;\n        }\n        return set;\n    }\n    /**\n    Tests whether there is a mark of this type in the given set.\n    */ isInSet(set) {\n        for(let i = 0; i < set.length; i++)if (set[i].type == this) return set[i];\n    }\n    /**\n    Queries whether a given mark type is\n    [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.\n    */ excludes(other) {\n        return this.excluded.indexOf(other) > -1;\n    }\n}\n/**\nA document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark\ntype](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may\noccur in conforming documents, and provides functionality for\ncreating and deserializing such documents.\n\nWhen given, the type parameters provide the names of the nodes and\nmarks in this schema.\n*/ class Schema {\n    /**\n    Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).\n    */ constructor(spec){\n        /**\n        An object for storing whatever values modules may want to\n        compute and cache per schema. (If you want to store something\n        in it, try to use property names unlikely to clash.)\n        */ this.cached = Object.create(null);\n        let instanceSpec = this.spec = {};\n        for(let prop in spec)instanceSpec[prop] = spec[prop];\n        instanceSpec.nodes = orderedmap__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(spec.nodes), instanceSpec.marks = orderedmap__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(spec.marks || {}), this.nodes = NodeType.compile(this.spec.nodes, this);\n        this.marks = MarkType.compile(this.spec.marks, this);\n        let contentExprCache = Object.create(null);\n        for(let prop in this.nodes){\n            if (prop in this.marks) throw new RangeError(prop + \" can not be both a node and a mark\");\n            let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks;\n            type.contentMatch = contentExprCache[contentExpr] || (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));\n            type.inlineContent = type.contentMatch.inlineContent;\n            type.markSet = markExpr == \"_\" ? null : markExpr ? gatherMarks(this, markExpr.split(\" \")) : markExpr == \"\" || !type.inlineContent ? [] : null;\n        }\n        for(let prop in this.marks){\n            let type = this.marks[prop], excl = type.spec.excludes;\n            type.excluded = excl == null ? [\n                type\n            ] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"));\n        }\n        this.nodeFromJSON = this.nodeFromJSON.bind(this);\n        this.markFromJSON = this.markFromJSON.bind(this);\n        this.topNodeType = this.nodes[this.spec.topNode || \"doc\"];\n        this.cached.wrappings = Object.create(null);\n    }\n    /**\n    Create a node in this schema. The `type` may be a string or a\n    `NodeType` instance. Attributes will be extended with defaults,\n    `content` may be a `Fragment`, `null`, a `Node`, or an array of\n    nodes.\n    */ node(type, attrs = null, content, marks) {\n        if (typeof type == \"string\") type = this.nodeType(type);\n        else if (!(type instanceof NodeType)) throw new RangeError(\"Invalid node type: \" + type);\n        else if (type.schema != this) throw new RangeError(\"Node type from different schema used (\" + type.name + \")\");\n        return type.createChecked(attrs, content, marks);\n    }\n    /**\n    Create a text node in the schema. Empty text nodes are not\n    allowed.\n    */ text(text, marks) {\n        let type = this.nodes.text;\n        return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks));\n    }\n    /**\n    Create a mark with the given type and attributes.\n    */ mark(type, attrs) {\n        if (typeof type == \"string\") type = this.marks[type];\n        return type.create(attrs);\n    }\n    /**\n    Deserialize a node from its JSON representation. This method is\n    bound.\n    */ nodeFromJSON(json) {\n        return Node.fromJSON(this, json);\n    }\n    /**\n    Deserialize a mark from its JSON representation. This method is\n    bound.\n    */ markFromJSON(json) {\n        return Mark.fromJSON(this, json);\n    }\n    /**\n    @internal\n    */ nodeType(name) {\n        let found = this.nodes[name];\n        if (!found) throw new RangeError(\"Unknown node type: \" + name);\n        return found;\n    }\n}\nfunction gatherMarks(schema, marks) {\n    let found = [];\n    for(let i = 0; i < marks.length; i++){\n        let name = marks[i], mark = schema.marks[name], ok = mark;\n        if (mark) {\n            found.push(mark);\n        } else {\n            for(let prop in schema.marks){\n                let mark = schema.marks[prop];\n                if (name == \"_\" || mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1) found.push(ok = mark);\n            }\n        }\n        if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\");\n    }\n    return found;\n}\n/**\nA DOM parser represents a strategy for parsing DOM content into a\nProseMirror document conforming to a given schema. Its behavior is\ndefined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).\n*/ class DOMParser {\n    /**\n    Create a parser that targets the given schema, using the given\n    parsing rules.\n    */ constructor(/**\n    The schema into which the parser parses.\n    */ schema, /**\n    The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser\n    uses, in order of precedence.\n    */ rules){\n        this.schema = schema;\n        this.rules = rules;\n        /**\n        @internal\n        */ this.tags = [];\n        /**\n        @internal\n        */ this.styles = [];\n        rules.forEach((rule)=>{\n            if (rule.tag) this.tags.push(rule);\n            else if (rule.style) this.styles.push(rule);\n        });\n        // Only normalize list elements when lists in the schema can't directly contain themselves\n        this.normalizeLists = !this.tags.some((r)=>{\n            if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false;\n            let node = schema.nodes[r.node];\n            return node.contentMatch.matchType(node);\n        });\n    }\n    /**\n    Parse a document from the content of a DOM node.\n    */ parse(dom, options = {}) {\n        let context = new ParseContext(this, options, false);\n        context.addAll(dom, options.from, options.to);\n        return context.finish();\n    }\n    /**\n    Parses the content of the given DOM node, like\n    [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of\n    options. But unlike that method, which produces a whole node,\n    this one returns a slice that is open at the sides, meaning that\n    the schema constraints aren't applied to the start of nodes to\n    the left of the input and the end of nodes at the end.\n    */ parseSlice(dom, options = {}) {\n        let context = new ParseContext(this, options, true);\n        context.addAll(dom, options.from, options.to);\n        return Slice.maxOpen(context.finish());\n    }\n    /**\n    @internal\n    */ matchTag(dom, context, after) {\n        for(let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++){\n            let rule = this.tags[i];\n            if (matches(dom, rule.tag) && (rule.namespace === undefined || dom.namespaceURI == rule.namespace) && (!rule.context || context.matchesContext(rule.context))) {\n                if (rule.getAttrs) {\n                    let result = rule.getAttrs(dom);\n                    if (result === false) continue;\n                    rule.attrs = result || undefined;\n                }\n                return rule;\n            }\n        }\n    }\n    /**\n    @internal\n    */ matchStyle(prop, value, context, after) {\n        for(let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++){\n            let rule = this.styles[i], style = rule.style;\n            if (style.indexOf(prop) != 0 || rule.context && !context.matchesContext(rule.context) || // Test that the style string either precisely matches the prop,\n            // or has an '=' sign after the prop, followed by the given\n            // value.\n            style.length > prop.length && (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value)) continue;\n            if (rule.getAttrs) {\n                let result = rule.getAttrs(value);\n                if (result === false) continue;\n                rule.attrs = result || undefined;\n            }\n            return rule;\n        }\n    }\n    /**\n    @internal\n    */ static schemaRules(schema) {\n        let result = [];\n        function insert(rule) {\n            let priority = rule.priority == null ? 50 : rule.priority, i = 0;\n            for(; i < result.length; i++){\n                let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;\n                if (nextPriority < priority) break;\n            }\n            result.splice(i, 0, rule);\n        }\n        for(let name in schema.marks){\n            let rules = schema.marks[name].spec.parseDOM;\n            if (rules) rules.forEach((rule)=>{\n                insert(rule = copy(rule));\n                if (!(rule.mark || rule.ignore || rule.clearMark)) rule.mark = name;\n            });\n        }\n        for(let name in schema.nodes){\n            let rules = schema.nodes[name].spec.parseDOM;\n            if (rules) rules.forEach((rule)=>{\n                insert(rule = copy(rule));\n                if (!(rule.node || rule.ignore || rule.mark)) rule.node = name;\n            });\n        }\n        return result;\n    }\n    /**\n    Construct a DOM parser using the parsing rules listed in a\n    schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by\n    [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).\n    */ static fromSchema(schema) {\n        return schema.cached.domParser || (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));\n    }\n}\nconst blockTags = {\n    address: true,\n    article: true,\n    aside: true,\n    blockquote: true,\n    canvas: true,\n    dd: true,\n    div: true,\n    dl: true,\n    fieldset: true,\n    figcaption: true,\n    figure: true,\n    footer: true,\n    form: true,\n    h1: true,\n    h2: true,\n    h3: true,\n    h4: true,\n    h5: true,\n    h6: true,\n    header: true,\n    hgroup: true,\n    hr: true,\n    li: true,\n    noscript: true,\n    ol: true,\n    output: true,\n    p: true,\n    pre: true,\n    section: true,\n    table: true,\n    tfoot: true,\n    ul: true\n};\nconst ignoreTags = {\n    head: true,\n    noscript: true,\n    object: true,\n    script: true,\n    style: true,\n    title: true\n};\nconst listTags = {\n    ol: true,\n    ul: true\n};\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;\nfunction wsOptionsFor(type, preserveWhitespace, base) {\n    if (preserveWhitespace != null) return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0);\n    return type && type.whitespace == \"pre\" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;\n}\nclass NodeContext {\n    constructor(type, attrs, // Marks applied to this node itself\n    marks, // Marks that can't apply here, but will be used in children if possible\n    pendingMarks, solid, match, options){\n        this.type = type;\n        this.attrs = attrs;\n        this.marks = marks;\n        this.pendingMarks = pendingMarks;\n        this.solid = solid;\n        this.options = options;\n        this.content = [];\n        // Marks applied to the node's children\n        this.activeMarks = Mark.none;\n        // Nested Marks with same type\n        this.stashMarks = [];\n        this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);\n    }\n    findWrapping(node) {\n        if (!this.match) {\n            if (!this.type) return [];\n            let fill = this.type.contentMatch.fillBefore(Fragment.from(node));\n            if (fill) {\n                this.match = this.type.contentMatch.matchFragment(fill);\n            } else {\n                let start = this.type.contentMatch, wrap;\n                if (wrap = start.findWrapping(node.type)) {\n                    this.match = start;\n                    return wrap;\n                } else {\n                    return null;\n                }\n            }\n        }\n        return this.match.findWrapping(node.type);\n    }\n    finish(openEnd) {\n        if (!(this.options & OPT_PRESERVE_WS)) {\n            let last = this.content[this.content.length - 1], m;\n            if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n                let text = last;\n                if (last.text.length == m[0].length) this.content.pop();\n                else this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));\n            }\n        }\n        let content = Fragment.from(this.content);\n        if (!openEnd && this.match) content = content.append(this.match.fillBefore(Fragment.empty, true));\n        return this.type ? this.type.create(this.attrs, content, this.marks) : content;\n    }\n    popFromStashMark(mark) {\n        for(let i = this.stashMarks.length - 1; i >= 0; i--)if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0];\n    }\n    applyPending(nextType) {\n        for(let i = 0, pending = this.pendingMarks; i < pending.length; i++){\n            let mark = pending[i];\n            if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) && !mark.isInSet(this.activeMarks)) {\n                this.activeMarks = mark.addToSet(this.activeMarks);\n                this.pendingMarks = mark.removeFromSet(this.pendingMarks);\n            }\n        }\n    }\n    inlineContext(node) {\n        if (this.type) return this.type.inlineContent;\n        if (this.content.length) return this.content[0].isInline;\n        return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());\n    }\n}\nclass ParseContext {\n    constructor(// The parser we are using.\n    parser, // The options passed to this parse.\n    options, isOpen){\n        this.parser = parser;\n        this.options = options;\n        this.isOpen = isOpen;\n        this.open = 0;\n        let topNode = options.topNode, topContext;\n        let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);\n        if (topNode) topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);\n        else if (isOpen) topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);\n        else topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);\n        this.nodes = [\n            topContext\n        ];\n        this.find = options.findPositions;\n        this.needsBlock = false;\n    }\n    get top() {\n        return this.nodes[this.open];\n    }\n    // Add a DOM node to the content. Text is inserted as text node,\n    // otherwise, the node is passed to `addElement` or, if it has a\n    // `style` attribute, `addElementWithStyles`.\n    addDOM(dom) {\n        if (dom.nodeType == 3) this.addTextNode(dom);\n        else if (dom.nodeType == 1) this.addElement(dom);\n    }\n    withStyleRules(dom, f) {\n        let style = dom.getAttribute(\"style\");\n        if (!style) return f();\n        let marks = this.readStyles(parseStyles(style));\n        if (!marks) return; // A style with ignore: true\n        let [addMarks, removeMarks] = marks, top = this.top;\n        for(let i = 0; i < removeMarks.length; i++)this.removePendingMark(removeMarks[i], top);\n        for(let i = 0; i < addMarks.length; i++)this.addPendingMark(addMarks[i]);\n        f();\n        for(let i = 0; i < addMarks.length; i++)this.removePendingMark(addMarks[i], top);\n        for(let i = 0; i < removeMarks.length; i++)this.addPendingMark(removeMarks[i]);\n    }\n    addTextNode(dom) {\n        let value = dom.nodeValue;\n        let top = this.top;\n        if (top.options & OPT_PRESERVE_WS_FULL || top.inlineContext(dom) || /[^ \\t\\r\\n\\u000c]/.test(value)) {\n            if (!(top.options & OPT_PRESERVE_WS)) {\n                value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \");\n                // If this starts with whitespace, and there is no node before it, or\n                // a hard break, or a text node that ends with whitespace, strip the\n                // leading space.\n                if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n                    let nodeBefore = top.content[top.content.length - 1];\n                    let domNodeBefore = dom.previousSibling;\n                    if (!nodeBefore || domNodeBefore && domNodeBefore.nodeName == \"BR\" || nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)) value = value.slice(1);\n                }\n            } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n                value = value.replace(/\\r?\\n|\\r/g, \" \");\n            } else {\n                value = value.replace(/\\r\\n?/g, \"\\n\");\n            }\n            if (value) this.insertNode(this.parser.schema.text(value));\n            this.findInText(dom);\n        } else {\n            this.findInside(dom);\n        }\n    }\n    // Try to find a handler for the given tag and use that to parse. If\n    // none is found, the element's content nodes are added directly.\n    addElement(dom, matchAfter) {\n        let name = dom.nodeName.toLowerCase(), ruleID;\n        if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom);\n        let rule = this.options.ruleFromNode && this.options.ruleFromNode(dom) || (ruleID = this.parser.matchTag(dom, this, matchAfter));\n        if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n            this.findInside(dom);\n            this.ignoreFallback(dom);\n        } else if (!rule || rule.skip || rule.closeParent) {\n            if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1);\n            else if (rule && rule.skip.nodeType) dom = rule.skip;\n            let sync, top = this.top, oldNeedsBlock = this.needsBlock;\n            if (blockTags.hasOwnProperty(name)) {\n                if (top.content.length && top.content[0].isInline && this.open) {\n                    this.open--;\n                    top = this.top;\n                }\n                sync = true;\n                if (!top.type) this.needsBlock = true;\n            } else if (!dom.firstChild) {\n                this.leafFallback(dom);\n                return;\n            }\n            if (rule && rule.skip) this.addAll(dom);\n            else this.withStyleRules(dom, ()=>this.addAll(dom));\n            if (sync) this.sync(top);\n            this.needsBlock = oldNeedsBlock;\n        } else {\n            this.withStyleRules(dom, ()=>{\n                this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);\n            });\n        }\n    }\n    // Called for leaf DOM nodes that would otherwise be ignored\n    leafFallback(dom) {\n        if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent) this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"));\n    }\n    // Called for ignored nodes\n    ignoreFallback(dom) {\n        // Ignored BR nodes should at least create an inline context\n        if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent)) this.findPlace(this.parser.schema.text(\"-\"));\n    }\n    // Run any style parser associated with the node's styles. Either\n    // return an array of marks, or null to indicate some of the styles\n    // had a rule with `ignore` set.\n    readStyles(styles) {\n        let add = Mark.none, remove = Mark.none;\n        for(let i = 0; i < styles.length; i += 2){\n            for(let after = undefined;;){\n                let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);\n                if (!rule) break;\n                if (rule.ignore) return null;\n                if (rule.clearMark) {\n                    this.top.pendingMarks.concat(this.top.activeMarks).forEach((m)=>{\n                        if (rule.clearMark(m)) remove = m.addToSet(remove);\n                    });\n                } else {\n                    add = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add);\n                }\n                if (rule.consuming === false) after = rule;\n                else break;\n            }\n        }\n        return [\n            add,\n            remove\n        ];\n    }\n    // Look up a handler for the given node. If none are found, return\n    // false. Otherwise, apply it, use its return value to drive the way\n    // the node's content is wrapped, and return true.\n    addElementByRule(dom, rule, continueAfter) {\n        let sync, nodeType, mark;\n        if (rule.node) {\n            nodeType = this.parser.schema.nodes[rule.node];\n            if (!nodeType.isLeaf) {\n                sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);\n            } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n                this.leafFallback(dom);\n            }\n        } else {\n            let markType = this.parser.schema.marks[rule.mark];\n            mark = markType.create(rule.attrs);\n            this.addPendingMark(mark);\n        }\n        let startIn = this.top;\n        if (nodeType && nodeType.isLeaf) {\n            this.findInside(dom);\n        } else if (continueAfter) {\n            this.addElement(dom, continueAfter);\n        } else if (rule.getContent) {\n            this.findInside(dom);\n            rule.getContent(dom, this.parser.schema).forEach((node)=>this.insertNode(node));\n        } else {\n            let contentDOM = dom;\n            if (typeof rule.contentElement == \"string\") contentDOM = dom.querySelector(rule.contentElement);\n            else if (typeof rule.contentElement == \"function\") contentDOM = rule.contentElement(dom);\n            else if (rule.contentElement) contentDOM = rule.contentElement;\n            this.findAround(dom, contentDOM, true);\n            this.addAll(contentDOM);\n        }\n        if (sync && this.sync(startIn)) this.open--;\n        if (mark) this.removePendingMark(mark, startIn);\n    }\n    // Add all child nodes between `startIndex` and `endIndex` (or the\n    // whole node, if not given). If `sync` is passed, use it to\n    // synchronize after every block element.\n    addAll(parent, startIndex, endIndex) {\n        let index = startIndex || 0;\n        for(let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index){\n            this.findAtPoint(parent, index);\n            this.addDOM(dom);\n        }\n        this.findAtPoint(parent, index);\n    }\n    // Try to find a way to fit the given node type into the current\n    // context. May add intermediate wrappers and/or leave non-solid\n    // nodes that we're in.\n    findPlace(node) {\n        let route, sync;\n        for(let depth = this.open; depth >= 0; depth--){\n            let cx = this.nodes[depth];\n            let found = cx.findWrapping(node);\n            if (found && (!route || route.length > found.length)) {\n                route = found;\n                sync = cx;\n                if (!found.length) break;\n            }\n            if (cx.solid) break;\n        }\n        if (!route) return false;\n        this.sync(sync);\n        for(let i = 0; i < route.length; i++)this.enterInner(route[i], null, false);\n        return true;\n    }\n    // Try to insert the given node, adjusting the context when needed.\n    insertNode(node) {\n        if (node.isInline && this.needsBlock && !this.top.type) {\n            let block = this.textblockFromContext();\n            if (block) this.enterInner(block);\n        }\n        if (this.findPlace(node)) {\n            this.closeExtra();\n            let top = this.top;\n            top.applyPending(node.type);\n            if (top.match) top.match = top.match.matchType(node.type);\n            let marks = top.activeMarks;\n            for(let i = 0; i < node.marks.length; i++)if (!top.type || top.type.allowsMarkType(node.marks[i].type)) marks = node.marks[i].addToSet(marks);\n            top.content.push(node.mark(marks));\n            return true;\n        }\n        return false;\n    }\n    // Try to start a node of the given type, adjusting the context when\n    // necessary.\n    enter(type, attrs, preserveWS) {\n        let ok = this.findPlace(type.create(attrs));\n        if (ok) this.enterInner(type, attrs, true, preserveWS);\n        return ok;\n    }\n    // Open a node of the given type\n    enterInner(type, attrs = null, solid = false, preserveWS) {\n        this.closeExtra();\n        let top = this.top;\n        top.applyPending(type);\n        top.match = top.match && top.match.matchType(type);\n        let options = wsOptionsFor(type, preserveWS, top.options);\n        if (top.options & OPT_OPEN_LEFT && top.content.length == 0) options |= OPT_OPEN_LEFT;\n        this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));\n        this.open++;\n    }\n    // Make sure all nodes above this.open are finished and added to\n    // their parents\n    closeExtra(openEnd = false) {\n        let i = this.nodes.length - 1;\n        if (i > this.open) {\n            for(; i > this.open; i--)this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));\n            this.nodes.length = this.open + 1;\n        }\n    }\n    finish() {\n        this.open = 0;\n        this.closeExtra(this.isOpen);\n        return this.nodes[0].finish(this.isOpen || this.options.topOpen);\n    }\n    sync(to) {\n        for(let i = this.open; i >= 0; i--)if (this.nodes[i] == to) {\n            this.open = i;\n            return true;\n        }\n        return false;\n    }\n    get currentPos() {\n        this.closeExtra();\n        let pos = 0;\n        for(let i = this.open; i >= 0; i--){\n            let content = this.nodes[i].content;\n            for(let j = content.length - 1; j >= 0; j--)pos += content[j].nodeSize;\n            if (i) pos++;\n        }\n        return pos;\n    }\n    findAtPoint(parent, offset) {\n        if (this.find) for(let i = 0; i < this.find.length; i++){\n            if (this.find[i].node == parent && this.find[i].offset == offset) this.find[i].pos = this.currentPos;\n        }\n    }\n    findInside(parent) {\n        if (this.find) for(let i = 0; i < this.find.length; i++){\n            if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) this.find[i].pos = this.currentPos;\n        }\n    }\n    findAround(parent, content, before) {\n        if (parent != content && this.find) for(let i = 0; i < this.find.length; i++){\n            if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n                let pos = content.compareDocumentPosition(this.find[i].node);\n                if (pos & (before ? 2 : 4)) this.find[i].pos = this.currentPos;\n            }\n        }\n    }\n    findInText(textNode) {\n        if (this.find) for(let i = 0; i < this.find.length; i++){\n            if (this.find[i].node == textNode) this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);\n        }\n    }\n    // Determines whether the given context string matches this context.\n    matchesContext(context) {\n        if (context.indexOf(\"|\") > -1) return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this);\n        let parts = context.split(\"/\");\n        let option = this.options.context;\n        let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);\n        let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);\n        let match = (i, depth)=>{\n            for(; i >= 0; i--){\n                let part = parts[i];\n                if (part == \"\") {\n                    if (i == parts.length - 1 || i == 0) continue;\n                    for(; depth >= minDepth; depth--)if (match(i - 1, depth)) return true;\n                    return false;\n                } else {\n                    let next = depth > 0 || depth == 0 && useRoot ? this.nodes[depth].type : option && depth >= minDepth ? option.node(depth - minDepth).type : null;\n                    if (!next || next.name != part && next.groups.indexOf(part) == -1) return false;\n                    depth--;\n                }\n            }\n            return true;\n        };\n        return match(parts.length - 1, this.open);\n    }\n    textblockFromContext() {\n        let $context = this.options.context;\n        if ($context) for(let d = $context.depth; d >= 0; d--){\n            let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;\n            if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt;\n        }\n        for(let name in this.parser.schema.nodes){\n            let type = this.parser.schema.nodes[name];\n            if (type.isTextblock && type.defaultAttrs) return type;\n        }\n    }\n    addPendingMark(mark) {\n        let found = findSameMarkInSet(mark, this.top.pendingMarks);\n        if (found) this.top.stashMarks.push(found);\n        this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);\n    }\n    removePendingMark(mark, upto) {\n        for(let depth = this.open; depth >= 0; depth--){\n            let level = this.nodes[depth];\n            let found = level.pendingMarks.lastIndexOf(mark);\n            if (found > -1) {\n                level.pendingMarks = mark.removeFromSet(level.pendingMarks);\n            } else {\n                level.activeMarks = mark.removeFromSet(level.activeMarks);\n                let stashMark = level.popFromStashMark(mark);\n                if (stashMark && level.type && level.type.allowsMarkType(stashMark.type)) level.activeMarks = stashMark.addToSet(level.activeMarks);\n            }\n            if (level == upto) break;\n        }\n    }\n}\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n    for(let child = dom.firstChild, prevItem = null; child; child = child.nextSibling){\n        let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;\n        if (name && listTags.hasOwnProperty(name) && prevItem) {\n            prevItem.appendChild(child);\n            child = prevItem;\n        } else if (name == \"li\") {\n            prevItem = child;\n        } else if (name) {\n            prevItem = null;\n        }\n    }\n}\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n    return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);\n}\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n    let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = [];\n    while(m = re.exec(style))result.push(m[1], m[2].trim());\n    return result;\n}\nfunction copy(obj) {\n    let copy = {};\n    for(let prop in obj)copy[prop] = obj[prop];\n    return copy;\n}\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n    let nodes = nodeType.schema.nodes;\n    for(let name in nodes){\n        let parent = nodes[name];\n        if (!parent.allowsMarkType(markType)) continue;\n        let seen = [], scan = (match)=>{\n            seen.push(match);\n            for(let i = 0; i < match.edgeCount; i++){\n                let { type, next } = match.edge(i);\n                if (type == nodeType) return true;\n                if (seen.indexOf(next) < 0 && scan(next)) return true;\n            }\n        };\n        if (scan(parent.contentMatch)) return true;\n    }\n}\nfunction findSameMarkInSet(mark, set) {\n    for(let i = 0; i < set.length; i++){\n        if (mark.eq(set[i])) return set[i];\n    }\n}\n/**\nA DOM serializer knows how to convert ProseMirror nodes and\nmarks of various types to DOM nodes.\n*/ class DOMSerializer {\n    /**\n    Create a serializer. `nodes` should map node names to functions\n    that take a node and return a description of the corresponding\n    DOM. `marks` does the same for mark names, but also gets an\n    argument that tells it whether the mark's content is block or\n    inline content (for typical use, it'll always be inline). A mark\n    serializer may be `null` to indicate that marks of that type\n    should not be serialized.\n    */ constructor(/**\n    The node serialization functions.\n    */ nodes, /**\n    The mark serialization functions.\n    */ marks){\n        this.nodes = nodes;\n        this.marks = marks;\n    }\n    /**\n    Serialize the content of this fragment to a DOM fragment. When\n    not in the browser, the `document` option, containing a DOM\n    document, should be passed so that the serializer can create\n    nodes.\n    */ serializeFragment(fragment, options = {}, target) {\n        if (!target) target = doc(options).createDocumentFragment();\n        let top = target, active = [];\n        fragment.forEach((node)=>{\n            if (active.length || node.marks.length) {\n                let keep = 0, rendered = 0;\n                while(keep < active.length && rendered < node.marks.length){\n                    let next = node.marks[rendered];\n                    if (!this.marks[next.type.name]) {\n                        rendered++;\n                        continue;\n                    }\n                    if (!next.eq(active[keep][0]) || next.type.spec.spanning === false) break;\n                    keep++;\n                    rendered++;\n                }\n                while(keep < active.length)top = active.pop()[1];\n                while(rendered < node.marks.length){\n                    let add = node.marks[rendered++];\n                    let markDOM = this.serializeMark(add, node.isInline, options);\n                    if (markDOM) {\n                        active.push([\n                            add,\n                            top\n                        ]);\n                        top.appendChild(markDOM.dom);\n                        top = markDOM.contentDOM || markDOM.dom;\n                    }\n                }\n            }\n            top.appendChild(this.serializeNodeInner(node, options));\n        });\n        return target;\n    }\n    /**\n    @internal\n    */ serializeNodeInner(node, options) {\n        let { dom, contentDOM } = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));\n        if (contentDOM) {\n            if (node.isLeaf) throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n            this.serializeFragment(node.content, options, contentDOM);\n        }\n        return dom;\n    }\n    /**\n    Serialize this node to a DOM node. This can be useful when you\n    need to serialize a part of a document, as opposed to the whole\n    document. To serialize a whole document, use\n    [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on\n    its [content](https://prosemirror.net/docs/ref/#model.Node.content).\n    */ serializeNode(node, options = {}) {\n        let dom = this.serializeNodeInner(node, options);\n        for(let i = node.marks.length - 1; i >= 0; i--){\n            let wrap = this.serializeMark(node.marks[i], node.isInline, options);\n            if (wrap) {\n                (wrap.contentDOM || wrap.dom).appendChild(dom);\n                dom = wrap.dom;\n            }\n        }\n        return dom;\n    }\n    /**\n    @internal\n    */ serializeMark(mark, inline, options = {}) {\n        let toDOM = this.marks[mark.type.name];\n        return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));\n    }\n    /**\n    Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If\n    the spec has a hole (zero) in it, `contentDOM` will point at the\n    node with the hole.\n    */ static renderSpec(doc, structure, xmlNS = null) {\n        if (typeof structure == \"string\") return {\n            dom: doc.createTextNode(structure)\n        };\n        if (structure.nodeType != null) return {\n            dom: structure\n        };\n        if (structure.dom && structure.dom.nodeType != null) return structure;\n        let tagName = structure[0], space = tagName.indexOf(\" \");\n        if (space > 0) {\n            xmlNS = tagName.slice(0, space);\n            tagName = tagName.slice(space + 1);\n        }\n        let contentDOM;\n        let dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName);\n        let attrs = structure[1], start = 1;\n        if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n            start = 2;\n            for(let name in attrs)if (attrs[name] != null) {\n                let space = name.indexOf(\" \");\n                if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);\n                else dom.setAttribute(name, attrs[name]);\n            }\n        }\n        for(let i = start; i < structure.length; i++){\n            let child = structure[i];\n            if (child === 0) {\n                if (i < structure.length - 1 || i > start) throw new RangeError(\"Content hole must be the only child of its parent node\");\n                return {\n                    dom,\n                    contentDOM: dom\n                };\n            } else {\n                let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);\n                dom.appendChild(inner);\n                if (innerContent) {\n                    if (contentDOM) throw new RangeError(\"Multiple content holes\");\n                    contentDOM = innerContent;\n                }\n            }\n        }\n        return {\n            dom,\n            contentDOM\n        };\n    }\n    /**\n    Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)\n    properties in a schema's node and mark specs.\n    */ static fromSchema(schema) {\n        return schema.cached.domSerializer || (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));\n    }\n    /**\n    Gather the serializers in a schema's node specs into an object.\n    This can be useful as a base to build a custom serializer from.\n    */ static nodesFromSchema(schema) {\n        let result = gatherToDOM(schema.nodes);\n        if (!result.text) result.text = (node)=>node.text;\n        return result;\n    }\n    /**\n    Gather the serializers in a schema's mark specs into an object.\n    */ static marksFromSchema(schema) {\n        return gatherToDOM(schema.marks);\n    }\n}\nfunction gatherToDOM(obj) {\n    let result = {};\n    for(let name in obj){\n        let toDOM = obj[name].spec.toDOM;\n        if (toDOM) result[name] = toDOM;\n    }\n    return result;\n}\nfunction doc(options) {\n    return options.document || window.document;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/prosemirror-model/dist/index.js\n");

/***/ })

};
;